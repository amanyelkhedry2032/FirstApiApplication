//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FirstApiApplication
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HumanResourceEntities : DbContext
    {
        public HumanResourceEntities()
            : base("name=HumanResourceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Action> Actions { get; set; }
        public virtual DbSet<Adminstration> Adminstrations { get; set; }
        public virtual DbSet<Attendence> Attendences { get; set; }
        public virtual DbSet<AttendenceupdateHistory> AttendenceupdateHistories { get; set; }
        public virtual DbSet<BalanceDayOff> BalanceDayOffs { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<CertificatesType> CertificatesTypes { get; set; }
        public virtual DbSet<Certification> Certifications { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Controller> Controllers { get; set; }
        public virtual DbSet<Controllers_Actions> Controllers_Actions { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<Disability> Disabilities { get; set; }
        public virtual DbSet<DisableOperation> DisableOperations { get; set; }
        public virtual DbSet<DisciplinaryAction> DisciplinaryActions { get; set; }
        public virtual DbSet<DownLoadLog> DownLoadLogs { get; set; }
        public virtual DbSet<DownLoadTransaction> DownLoadTransactions { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<EmpCard> EmpCards { get; set; }
        public virtual DbSet<EmpFace> EmpFaces { get; set; }
        public virtual DbSet<EmpFingerPrint> EmpFingerPrints { get; set; }
        public virtual DbSet<EmployeeCertification> EmployeeCertifications { get; set; }
        public virtual DbSet<EmployeeDayOff> EmployeeDayOffs { get; set; }
        public virtual DbSet<EmployeeInsurance> EmployeeInsurances { get; set; }
        public virtual DbSet<EmployeeMilitaryStatu> EmployeeMilitaryStatus { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeVacationRequest> EmployeeVacationRequests { get; set; }
        public virtual DbSet<GeneralService> GeneralServices { get; set; }
        public virtual DbSet<GeneralSetting> GeneralSettings { get; set; }
        public virtual DbSet<Governerate> Governerates { get; set; }
        public virtual DbSet<Grouping> Groupings { get; set; }
        public virtual DbSet<GroupingSetting> GroupingSettings { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<LateEarly> LateEarlies { get; set; }
        public virtual DbSet<LeaveOfWork> LeaveOfWorks { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }
        public virtual DbSet<MililatryStatu> MililatryStatus { get; set; }
        public virtual DbSet<Nationality> Nationalities { get; set; }
        public virtual DbSet<NotificationType> NotificationTypes { get; set; }
        public virtual DbSet<NotificationTypeUser> NotificationTypeUsers { get; set; }
        public virtual DbSet<NutritionWorker> NutritionWorkers { get; set; }
        public virtual DbSet<OfficialVacationExpection> OfficialVacationExpections { get; set; }
        public virtual DbSet<OfficialVacation> OfficialVacations { get; set; }
        public virtual DbSet<OperationEmployee> OperationEmployees { get; set; }
        public virtual DbSet<OperationPermission> OperationPermissions { get; set; }
        public virtual DbSet<OperationVacation> OperationVacations { get; set; }
        public virtual DbSet<OverTime> OverTimes { get; set; }
        public virtual DbSet<PermissionRequestTo> PermissionRequestToes { get; set; }
        public virtual DbSet<PermissionType> PermissionTypes { get; set; }
        public virtual DbSet<Place> Places { get; set; }
        public virtual DbSet<Religion> Religions { get; set; }
        public virtual DbSet<Retirement> Retirements { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SkillLevel> SkillLevels { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TakeOff> TakeOffs { get; set; }
        public virtual DbSet<TaskRequest> TaskRequests { get; set; }
        public virtual DbSet<TempDayOff> TempDayOffs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<VacationBalance> VacationBalances { get; set; }
        public virtual DbSet<Vacation> Vacations { get; set; }
        public virtual DbSet<WorkLicence> WorkLicences { get; set; }
    
        public virtual ObjectResult<Nullable<int>> count_permission(Nullable<int> empId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("count_permission", empIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<dd_Result> dd()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dd_Result>("dd");
        }
    
        public virtual ObjectResult<Get_Orders_Result> Get_Orders(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Orders_Result>("Get_Orders", orderIdParameter);
        }
    
        public virtual ObjectResult<Get_Orders_Data_Result> Get_Orders_Data(string iDS)
        {
            var iDSParameter = iDS != null ?
                new ObjectParameter("IDS", iDS) :
                new ObjectParameter("IDS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Orders_Data_Result>("Get_Orders_Data", iDSParameter);
        }
    
        public virtual ObjectResult<Get_Permission_Result> Get_Permission(Nullable<int> permissionid)
        {
            var permissionidParameter = permissionid.HasValue ?
                new ObjectParameter("permissionid", permissionid) :
                new ObjectParameter("permissionid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Permission_Result>("Get_Permission", permissionidParameter);
        }
    
        public virtual ObjectResult<Get_TerminalUsers_Result> Get_TerminalUsers(Nullable<int> empid, Nullable<int> deptid, Nullable<int> face, Nullable<int> finger, Nullable<int> card)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var deptidParameter = deptid.HasValue ?
                new ObjectParameter("deptid", deptid) :
                new ObjectParameter("deptid", typeof(int));
    
            var faceParameter = face.HasValue ?
                new ObjectParameter("face", face) :
                new ObjectParameter("face", typeof(int));
    
            var fingerParameter = finger.HasValue ?
                new ObjectParameter("finger", finger) :
                new ObjectParameter("finger", typeof(int));
    
            var cardParameter = card.HasValue ?
                new ObjectParameter("card", card) :
                new ObjectParameter("card", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_TerminalUsers_Result>("Get_TerminalUsers", empidParameter, deptidParameter, faceParameter, fingerParameter, cardParameter);
        }
    
        public virtual ObjectResult<GetHistoricalData_Result> GetHistoricalData(Nullable<int> employeeID, Nullable<System.DateTime> date)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHistoricalData_Result>("GetHistoricalData", employeeIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetVacationBalance_Result> GetVacationBalance(Nullable<int> employeeID, Nullable<int> year, Nullable<int> vacationId)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var vacationIdParameter = vacationId.HasValue ?
                new ObjectParameter("vacationId", vacationId) :
                new ObjectParameter("vacationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVacationBalance_Result>("GetVacationBalance", employeeIDParameter, yearParameter, vacationIdParameter);
        }
    
        public virtual int Select_Search(string iDS)
        {
            var iDSParameter = iDS != null ?
                new ObjectParameter("IDS", iDS) :
                new ObjectParameter("IDS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Select_Search", iDSParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<TurnOffDay_Result> TurnOffDay(Nullable<int> tempdayoff)
        {
            var tempdayoffParameter = tempdayoff.HasValue ?
                new ObjectParameter("tempdayoff", tempdayoff) :
                new ObjectParameter("tempdayoff", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TurnOffDay_Result>("TurnOffDay", tempdayoffParameter);
        }
    
        public virtual ObjectResult<Vacation_Request_Result> Vacation_Request(Nullable<int> requestId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vacation_Request_Result>("Vacation_Request", requestIdParameter);
        }
    }
}
